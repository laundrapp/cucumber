//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/AmbiguousParameterTypeException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/AmbiguousParameterTypeException.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionException.h"
#include "io/cucumber/cucumberexpressions/GeneratedExpression.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/SortedSet.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsAmbiguousParameterTypeException () {
 @public
  JavaUtilRegexPattern *regexp_;
  NSString *parameterTypeRegexp_;
  id<JavaUtilSortedSet> parameterTypes_;
  id<JavaUtilList> generatedExpressions_;
}

+ (NSString *)parameterTypeNamesWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)parameterTypes;

+ (NSString *)expressionsWithJavaUtilList:(id<JavaUtilList>)generatedExpressions;

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)strings;

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, regexp_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, parameterTypeRegexp_, NSString *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, parameterTypes_, id<JavaUtilSortedSet>)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, generatedExpressions_, id<JavaUtilList>)

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_parameterTypeNamesWithJavaUtilSortedSet_(id<JavaUtilSortedSet> parameterTypes);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_expressionsWithJavaUtilList_(id<JavaUtilList> generatedExpressions);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_joinWithJavaUtilList_(id<JavaUtilList> strings);

@implementation IoCucumberCucumberexpressionsAmbiguousParameterTypeException

- (instancetype __nonnull)initWithNSString:(NSString *)parameterTypeRegexp
                  withJavaUtilRegexPattern:(JavaUtilRegexPattern *)expressionRegexp
                     withJavaUtilSortedSet:(id<JavaUtilSortedSet>)parameterTypes
                          withJavaUtilList:(id<JavaUtilList>)generatedExpressions {
  IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_(self, parameterTypeRegexp, expressionRegexp, parameterTypes, generatedExpressions);
  return self;
}

+ (NSString *)parameterTypeNamesWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)parameterTypes {
  return IoCucumberCucumberexpressionsAmbiguousParameterTypeException_parameterTypeNamesWithJavaUtilSortedSet_(parameterTypes);
}

+ (NSString *)expressionsWithJavaUtilList:(id<JavaUtilList>)generatedExpressions {
  return IoCucumberCucumberexpressionsAmbiguousParameterTypeException_expressionsWithJavaUtilList_(generatedExpressions);
}

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)strings {
  return IoCucumberCucumberexpressionsAmbiguousParameterTypeException_joinWithJavaUtilList_(strings);
}

- (JavaUtilRegexPattern *)getRegexp {
  return regexp_;
}

- (NSString *)getParameterTypeRegexp {
  return parameterTypeRegexp_;
}

- (id<JavaUtilSortedSet>)getParameterTypes {
  return parameterTypes_;
}

- (id<JavaUtilList>)getGeneratedExpressions {
  return generatedExpressions_;
}

- (void)dealloc {
  RELEASE_(regexp_);
  RELEASE_(parameterTypeRegexp_);
  RELEASE_(parameterTypes_);
  RELEASE_(generatedExpressions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSortedSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaUtilRegexPattern:withJavaUtilSortedSet:withJavaUtilList:);
  methods[1].selector = @selector(parameterTypeNamesWithJavaUtilSortedSet:);
  methods[2].selector = @selector(expressionsWithJavaUtilList:);
  methods[3].selector = @selector(joinWithJavaUtilList:);
  methods[4].selector = @selector(getRegexp);
  methods[5].selector = @selector(getParameterTypeRegexp);
  methods[6].selector = @selector(getParameterTypes);
  methods[7].selector = @selector(getGeneratedExpressions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "regexp_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parameterTypeRegexp_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parameterTypes_", "LJavaUtilSortedSet;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "generatedExpressions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilRegexPattern;LJavaUtilSortedSet;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/regex/Pattern;Ljava/util/SortedSet<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;)V", "parameterTypeNames", "LJavaUtilSortedSet;", "(Ljava/util/SortedSet<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;)Ljava/lang/String;", "expressions", "LJavaUtilList;", "(Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;)Ljava/lang/String;", "join", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "()Ljava/util/SortedSet<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;", "()Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;", "Ljava/util/SortedSet<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;", "Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsAmbiguousParameterTypeException = { "AmbiguousParameterTypeException", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsAmbiguousParameterTypeException;
}

@end

void IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_(IoCucumberCucumberexpressionsAmbiguousParameterTypeException *self, NSString *parameterTypeRegexp, JavaUtilRegexPattern *expressionRegexp, id<JavaUtilSortedSet> parameterTypes, id<JavaUtilList> generatedExpressions) {
  IoCucumberCucumberexpressionsCucumberExpressionException_initWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Your Regular Expression /%s/\nmatches multiple parameter types with regexp /%s/:\n   %s\n\nI couldn't decide which one to use. You have two options:\n\n1) Use a Cucumber Expression instead of a Regular Expression. Try one of these:\n   %s\n\n2) Make one of the parameter types preferential and continue to use a Regular Expression.\n\n", [IOSObjectArray arrayWithObjects:(id[]){ [((JavaUtilRegexPattern *) nil_chk(expressionRegexp)) pattern], parameterTypeRegexp, IoCucumberCucumberexpressionsAmbiguousParameterTypeException_parameterTypeNamesWithJavaUtilSortedSet_(parameterTypes), IoCucumberCucumberexpressionsAmbiguousParameterTypeException_expressionsWithJavaUtilList_(generatedExpressions) } count:4 type:NSObject_class_()]));
  JreStrongAssign(&self->regexp_, expressionRegexp);
  JreStrongAssign(&self->parameterTypeRegexp_, parameterTypeRegexp);
  JreStrongAssign(&self->parameterTypes_, parameterTypes);
  JreStrongAssign(&self->generatedExpressions_, generatedExpressions);
}

IoCucumberCucumberexpressionsAmbiguousParameterTypeException *new_IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_(NSString *parameterTypeRegexp, JavaUtilRegexPattern *expressionRegexp, id<JavaUtilSortedSet> parameterTypes, id<JavaUtilList> generatedExpressions) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_, parameterTypeRegexp, expressionRegexp, parameterTypes, generatedExpressions)
}

IoCucumberCucumberexpressionsAmbiguousParameterTypeException *create_IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_(NSString *parameterTypeRegexp, JavaUtilRegexPattern *expressionRegexp, id<JavaUtilSortedSet> parameterTypes, id<JavaUtilList> generatedExpressions) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsAmbiguousParameterTypeException, initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_, parameterTypeRegexp, expressionRegexp, parameterTypes, generatedExpressions)
}

NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_parameterTypeNamesWithJavaUtilSortedSet_(id<JavaUtilSortedSet> parameterTypes) {
  IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initialize();
  id<JavaUtilList> parameterNames = create_JavaUtilArrayList_init();
  for (IoCucumberCucumberexpressionsParameterType * __strong p in nil_chk(parameterTypes)) {
    NSString *s = JreStrcat("C$C", '{', [((IoCucumberCucumberexpressionsParameterType *) nil_chk(p)) getName], '}');
    [parameterNames addWithId:s];
  }
  return IoCucumberCucumberexpressionsAmbiguousParameterTypeException_joinWithJavaUtilList_(parameterNames);
}

NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_expressionsWithJavaUtilList_(id<JavaUtilList> generatedExpressions) {
  IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initialize();
  id<JavaUtilList> sources = create_JavaUtilArrayList_init();
  for (IoCucumberCucumberexpressionsGeneratedExpression * __strong generatedExpression in nil_chk(generatedExpressions)) {
    NSString *source = [((IoCucumberCucumberexpressionsGeneratedExpression *) nil_chk(generatedExpression)) getSource];
    [sources addWithId:source];
  }
  return IoCucumberCucumberexpressionsAmbiguousParameterTypeException_joinWithJavaUtilList_(sources);
}

NSString *IoCucumberCucumberexpressionsAmbiguousParameterTypeException_joinWithJavaUtilList_(id<JavaUtilList> strings) {
  IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initialize();
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  jboolean first = true;
  for (NSString * __strong element in nil_chk(strings)) {
    if (first) {
      first = false;
    }
    else {
      [builder appendWithNSString:@"\n   "];
    }
    [builder appendWithNSString:element];
  }
  return [builder description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsAmbiguousParameterTypeException)
