//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactory.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactory.h"
#include "io/cucumber/cucumberexpressions/GeneratedExpression.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory () {
 @public
  NSString *expressionTemplate_;
  id<JavaUtilList> parameterTypeCombinations_;
}

- (void)generatePermutationsWithJavaUtilList:(id<JavaUtilList>)generatedExpressions
                                     withInt:(jint)depth
                            withJavaUtilList:(id<JavaUtilList>)currentParameterTypes;

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory, expressionTemplate_, NSString *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory, parameterTypeCombinations_, id<JavaUtilList>)

__attribute__((unused)) static void IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_generatePermutationsWithJavaUtilList_withInt_withJavaUtilList_(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory *self, id<JavaUtilList> generatedExpressions, jint depth, id<JavaUtilList> currentParameterTypes);

@implementation IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory

- (instancetype __nonnull)initWithNSString:(NSString *)expressionTemplate
                          withJavaUtilList:(id<JavaUtilList>)parameterTypeCombinations {
  IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_initWithNSString_withJavaUtilList_(self, expressionTemplate, parameterTypeCombinations);
  return self;
}

- (id<JavaUtilList>)generateExpressions {
  id<JavaUtilList> generatedExpressions = create_JavaUtilArrayList_init();
  IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_generatePermutationsWithJavaUtilList_withInt_withJavaUtilList_(self, generatedExpressions, 0, create_JavaUtilArrayList_init());
  return generatedExpressions;
}

- (void)generatePermutationsWithJavaUtilList:(id<JavaUtilList>)generatedExpressions
                                     withInt:(jint)depth
                            withJavaUtilList:(id<JavaUtilList>)currentParameterTypes {
  IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_generatePermutationsWithJavaUtilList_withInt_withJavaUtilList_(self, generatedExpressions, depth, currentParameterTypes);
}

- (void)dealloc {
  RELEASE_(expressionTemplate_);
  RELEASE_(parameterTypeCombinations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaUtilList:);
  methods[1].selector = @selector(generateExpressions);
  methods[2].selector = @selector(generatePermutationsWithJavaUtilList:withInt:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expressionTemplate_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parameterTypeCombinations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;>;)V", "()Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;", "generatePermutations", "LJavaUtilList;ILJavaUtilList;", "(Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;ILjava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;)V", "Ljava/util/List<Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory = { "CombinatorialGeneratedExpressionFactory", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory;
}

@end

void IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_initWithNSString_withJavaUtilList_(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory *self, NSString *expressionTemplate, id<JavaUtilList> parameterTypeCombinations) {
  NSObject_init(self);
  JreStrongAssign(&self->expressionTemplate_, expressionTemplate);
  JreStrongAssign(&self->parameterTypeCombinations_, parameterTypeCombinations);
}

IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory *new_IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_initWithNSString_withJavaUtilList_(NSString *expressionTemplate, id<JavaUtilList> parameterTypeCombinations) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory, initWithNSString_withJavaUtilList_, expressionTemplate, parameterTypeCombinations)
}

IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory *create_IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_initWithNSString_withJavaUtilList_(NSString *expressionTemplate, id<JavaUtilList> parameterTypeCombinations) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory, initWithNSString_withJavaUtilList_, expressionTemplate, parameterTypeCombinations)
}

void IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_generatePermutationsWithJavaUtilList_withInt_withJavaUtilList_(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory *self, id<JavaUtilList> generatedExpressions, jint depth, id<JavaUtilList> currentParameterTypes) {
  if (depth == [((id<JavaUtilList>) nil_chk(self->parameterTypeCombinations_)) size]) {
    [((id<JavaUtilList>) nil_chk(generatedExpressions)) addWithId:create_IoCucumberCucumberexpressionsGeneratedExpression_initWithNSString_withJavaUtilList_(self->expressionTemplate_, currentParameterTypes)];
    return;
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk([self->parameterTypeCombinations_ getWithInt:depth])) size]; ++i) {
    id<JavaUtilList> newCurrentParameterTypes = create_JavaUtilArrayList_initWithJavaUtilCollection_(currentParameterTypes);
    [newCurrentParameterTypes addWithId:[((id<JavaUtilList>) nil_chk([self->parameterTypeCombinations_ getWithInt:depth])) getWithInt:i]];
    IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_generatePermutationsWithJavaUtilList_withInt_withJavaUtilList_(self, generatedExpressions, depth + 1, newCurrentParameterTypes);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory)
