//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/CucumberExpressionGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactory.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionGenerator.h"
#include "io/cucumber/cucumberexpressions/GeneratedExpression.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeMatcher.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsCucumberExpressionGenerator () {
 @public
  IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry_;
}

- (NSString *)escapeWithNSString:(NSString *)s;

- (id<JavaUtilList>)createParameterTypeMatchersWithNSString:(NSString *)text;

+ (id<JavaUtilList>)createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType
                                                                                 withNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCucumberExpressionGenerator, parameterTypeRegistry_, IoCucumberCucumberexpressionsParameterTypeRegistry *)

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpressionGenerator_escapeWithNSString_(IoCucumberCucumberexpressionsCucumberExpressionGenerator *self, NSString *s);

__attribute__((unused)) static id<JavaUtilList> IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithNSString_(IoCucumberCucumberexpressionsCucumberExpressionGenerator *self, NSString *text);

__attribute__((unused)) static id<JavaUtilList> IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType_withNSString_(IoCucumberCucumberexpressionsParameterType *parameterType, NSString *text);

__attribute__((unused)) static IOSObjectArray *IoCucumberCucumberexpressionsCucumberExpressionGenerator__Annotations$0(void);

@implementation IoCucumberCucumberexpressionsCucumberExpressionGenerator

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsParameterTypeRegistry:(IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry {
  IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(self, parameterTypeRegistry);
  return self;
}

- (id<JavaUtilList>)generateExpressionsWithNSString:(NSString *)text {
  id<JavaUtilList> parameterTypeCombinations = create_JavaUtilArrayList_init();
  id<JavaUtilList> parameterTypeMatchers = IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithNSString_(self, text);
  JavaLangStringBuilder *expressionTemplate = create_JavaLangStringBuilder_init();
  jint pos = 0;
  while (true) {
    id<JavaUtilList> matchingParameterTypeMatchers = create_JavaUtilArrayList_init();
    for (IoCucumberCucumberexpressionsParameterTypeMatcher * __strong parameterTypeMatcher in nil_chk(parameterTypeMatchers)) {
      IoCucumberCucumberexpressionsParameterTypeMatcher *advancedParameterTypeMatcher = [((IoCucumberCucumberexpressionsParameterTypeMatcher *) nil_chk(parameterTypeMatcher)) advanceToWithInt:pos];
      if ([((IoCucumberCucumberexpressionsParameterTypeMatcher *) nil_chk(advancedParameterTypeMatcher)) find]) {
        [matchingParameterTypeMatchers addWithId:advancedParameterTypeMatcher];
      }
    }
    if (![matchingParameterTypeMatchers isEmpty]) {
      JavaUtilCollections_sortWithJavaUtilList_(matchingParameterTypeMatchers);
      IoCucumberCucumberexpressionsParameterTypeMatcher *bestParameterTypeMatcher = [matchingParameterTypeMatchers getWithInt:0];
      id<JavaUtilList> bestParameterTypeMatchers = create_JavaUtilArrayList_init();
      for (IoCucumberCucumberexpressionsParameterTypeMatcher * __strong m in matchingParameterTypeMatchers) {
        if ([((IoCucumberCucumberexpressionsParameterTypeMatcher *) nil_chk(m)) compareToWithId:bestParameterTypeMatcher] == 0) {
          [bestParameterTypeMatchers addWithId:m];
        }
      }
      id<JavaUtilSortedSet> parameterTypes = create_JavaUtilTreeSet_init();
      id<JavaUtilSet> set = create_JavaUtilHashSet_init();
      for (IoCucumberCucumberexpressionsParameterTypeMatcher * __strong parameterTypeMatcher in bestParameterTypeMatchers) {
        IoCucumberCucumberexpressionsParameterType *parameterType = [((IoCucumberCucumberexpressionsParameterTypeMatcher *) nil_chk(parameterTypeMatcher)) getParameterType];
        [set addWithId:parameterType];
      }
      [parameterTypes addAllWithJavaUtilCollection:set];
      [parameterTypeCombinations addWithId:create_JavaUtilArrayList_initWithJavaUtilCollection_(parameterTypes)];
      [((JavaLangStringBuilder *) nil_chk([expressionTemplate appendWithNSString:IoCucumberCucumberexpressionsCucumberExpressionGenerator_escapeWithNSString_(self, [((NSString *) nil_chk(text)) java_substring:pos endIndex:[((IoCucumberCucumberexpressionsParameterTypeMatcher *) nil_chk(bestParameterTypeMatcher)) start]])])) appendWithNSString:@"{%s}"];
      pos = [bestParameterTypeMatcher start] + [((NSString *) nil_chk([bestParameterTypeMatcher group])) java_length];
    }
    else {
      break;
    }
    if (pos >= [text java_length]) {
      break;
    }
  }
  [expressionTemplate appendWithNSString:IoCucumberCucumberexpressionsCucumberExpressionGenerator_escapeWithNSString_(self, [((NSString *) nil_chk(text)) java_substring:pos])];
  return [create_IoCucumberCucumberexpressionsCombinatorialGeneratedExpressionFactory_initWithNSString_withJavaUtilList_([expressionTemplate description], parameterTypeCombinations) generateExpressions];
}

- (NSString *)escapeWithNSString:(NSString *)s {
  return IoCucumberCucumberexpressionsCucumberExpressionGenerator_escapeWithNSString_(self, s);
}

- (IoCucumberCucumberexpressionsGeneratedExpression *)generateExpressionWithNSString:(NSString *)text {
  id<JavaUtilList> generatedExpressions = [self generateExpressionsWithNSString:text];
  return [((id<JavaUtilList>) nil_chk(generatedExpressions)) getWithInt:0];
}

- (id<JavaUtilList>)createParameterTypeMatchersWithNSString:(NSString *)text {
  return IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithNSString_(self, text);
}

+ (id<JavaUtilList>)createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType
                                                                                 withNSString:(NSString *)text {
  return IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType_withNSString_(parameterType, text);
}

- (void)dealloc {
  RELEASE_(parameterTypeRegistry_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsGeneratedExpression;", 0x1, 5, 2, -1, -1, 6, -1 },
    { NULL, "LJavaUtilList;", 0x2, 7, 2, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 7, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsParameterTypeRegistry:);
  methods[1].selector = @selector(generateExpressionsWithNSString:);
  methods[2].selector = @selector(escapeWithNSString:);
  methods[3].selector = @selector(generateExpressionWithNSString:);
  methods[4].selector = @selector(createParameterTypeMatchersWithNSString:);
  methods[5].selector = @selector(createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameterTypeRegistry_", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "generateExpressions", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/GeneratedExpression;>;", "escape", "generateExpression", (void *)&IoCucumberCucumberexpressionsCucumberExpressionGenerator__Annotations$0, "createParameterTypeMatchers", "(Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterTypeMatcher;>;", "LIoCucumberCucumberexpressionsParameterType;LNSString;", "(Lio/cucumber/cucumberexpressions/ParameterType<*>;Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterTypeMatcher;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsCucumberExpressionGenerator = { "CucumberExpressionGenerator", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsCucumberExpressionGenerator;
}

@end

void IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsCucumberExpressionGenerator *self, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  NSObject_init(self);
  JreStrongAssign(&self->parameterTypeRegistry_, parameterTypeRegistry);
}

IoCucumberCucumberexpressionsCucumberExpressionGenerator *new_IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsCucumberExpressionGenerator, initWithIoCucumberCucumberexpressionsParameterTypeRegistry_, parameterTypeRegistry)
}

IoCucumberCucumberexpressionsCucumberExpressionGenerator *create_IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsCucumberExpressionGenerator, initWithIoCucumberCucumberexpressionsParameterTypeRegistry_, parameterTypeRegistry)
}

NSString *IoCucumberCucumberexpressionsCucumberExpressionGenerator_escapeWithNSString_(IoCucumberCucumberexpressionsCucumberExpressionGenerator *self, NSString *s) {
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(s)) java_replaceAll:@"%" withReplacement:@"%%"])) java_replaceAll:@"\\(" withReplacement:@"\\\\("])) java_replaceAll:@"\\{" withReplacement:@"\\\\{"])) java_replaceAll:@"/" withReplacement:@"\\\\/"];
}

id<JavaUtilList> IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithNSString_(IoCucumberCucumberexpressionsCucumberExpressionGenerator *self, NSString *text) {
  id<JavaUtilCollection> parameterTypes = [((IoCucumberCucumberexpressionsParameterTypeRegistry *) nil_chk(self->parameterTypeRegistry_)) getParameterTypes];
  id<JavaUtilList> parameterTypeMatchers = create_JavaUtilArrayList_init();
  for (IoCucumberCucumberexpressionsParameterType * __strong parameterType in nil_chk(parameterTypes)) {
    if ([((IoCucumberCucumberexpressionsParameterType *) nil_chk(parameterType)) useForSnippets]) {
      [parameterTypeMatchers addAllWithJavaUtilCollection:IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType_withNSString_(parameterType, text)];
    }
  }
  return parameterTypeMatchers;
}

id<JavaUtilList> IoCucumberCucumberexpressionsCucumberExpressionGenerator_createParameterTypeMatchersWithIoCucumberCucumberexpressionsParameterType_withNSString_(IoCucumberCucumberexpressionsParameterType *parameterType, NSString *text) {
  IoCucumberCucumberexpressionsCucumberExpressionGenerator_initialize();
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  id<JavaUtilList> captureGroupRegexps = [((IoCucumberCucumberexpressionsParameterType *) nil_chk(parameterType)) getRegexps];
  for (NSString * __strong captureGroupRegexp in nil_chk(captureGroupRegexps)) {
    JavaUtilRegexPattern *regexp = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$C", '(', captureGroupRegexp, ')'));
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(regexp)) matcherWithJavaLangCharSequence:text];
    [result addWithId:create_IoCucumberCucumberexpressionsParameterTypeMatcher_initWithIoCucumberCucumberexpressionsParameterType_withJavaUtilRegexMatcher_withInt_(parameterType, matcher, [((NSString *) nil_chk(text)) java_length])];
  }
  return result;
}

IOSObjectArray *IoCucumberCucumberexpressionsCucumberExpressionGenerator__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsCucumberExpressionGenerator)
