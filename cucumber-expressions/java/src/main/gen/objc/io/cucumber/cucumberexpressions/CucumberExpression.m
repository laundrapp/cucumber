//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/CucumberExpression.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Argument.h"
#include "io/cucumber/cucumberexpressions/CucumberExpression.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "io/cucumber/cucumberexpressions/TreeRegexp.h"
#include "io/cucumber/cucumberexpressions/UndefinedParameterTypeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsCucumberExpression () {
 @public
  id<JavaUtilList> parameterTypes_;
  NSString *source_;
  IoCucumberCucumberexpressionsTreeRegexp *treeRegexp_;
}

- (NSString *)processEscapesWithNSString:(NSString *)expression;

- (NSString *)processAlternationWithNSString:(NSString *)expression;

- (NSString *)processOptionalWithNSString:(NSString *)expression;

- (NSString *)processParametersWithNSString:(NSString *)expression
withIoCucumberCucumberexpressionsParameterTypeRegistry:(IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry;

- (NSString *)buildCaptureRegexpWithJavaUtilList:(id<JavaUtilList>)regexps;

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCucumberExpression, parameterTypes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCucumberExpression, source_, NSString *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsCucumberExpression, treeRegexp_, IoCucumberCucumberexpressionsTreeRegexp *)

inline JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_get_ESCAPE_PATTERN(void);
static JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_ESCAPE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsCucumberExpression, ESCAPE_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_get_OPTIONAL_PATTERN(void);
static JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_OPTIONAL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsCucumberExpression, OPTIONAL_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_get_ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP(void);
static JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsCucumberExpression, ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP, JavaUtilRegexPattern *)

inline NSString *IoCucumberCucumberexpressionsCucumberExpression_get_DOUBLE_ESCAPE(void);
static NSString *IoCucumberCucumberexpressionsCucumberExpression_DOUBLE_ESCAPE = @"\\\\";
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsCucumberExpression, DOUBLE_ESCAPE, NSString *)

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpression_processEscapesWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpression_processAlternationWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpression_processOptionalWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpression_processParametersWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry);

__attribute__((unused)) static NSString *IoCucumberCucumberexpressionsCucumberExpression_buildCaptureRegexpWithJavaUtilList_(IoCucumberCucumberexpressionsCucumberExpression *self, id<JavaUtilList> regexps);

J2OBJC_INITIALIZED_DEFN(IoCucumberCucumberexpressionsCucumberExpression)

JavaUtilRegexPattern *IoCucumberCucumberexpressionsCucumberExpression_PARAMETER_PATTERN;

@implementation IoCucumberCucumberexpressionsCucumberExpression

- (instancetype __nonnull)initWithNSString:(NSString *)expression
withIoCucumberCucumberexpressionsParameterTypeRegistry:(IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry {
  IoCucumberCucumberexpressionsCucumberExpression_initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(self, expression, parameterTypeRegistry);
  return self;
}

- (NSString *)processEscapesWithNSString:(NSString *)expression {
  return IoCucumberCucumberexpressionsCucumberExpression_processEscapesWithNSString_(self, expression);
}

- (NSString *)processAlternationWithNSString:(NSString *)expression {
  return IoCucumberCucumberexpressionsCucumberExpression_processAlternationWithNSString_(self, expression);
}

- (NSString *)processOptionalWithNSString:(NSString *)expression {
  return IoCucumberCucumberexpressionsCucumberExpression_processOptionalWithNSString_(self, expression);
}

- (NSString *)processParametersWithNSString:(NSString *)expression
withIoCucumberCucumberexpressionsParameterTypeRegistry:(IoCucumberCucumberexpressionsParameterTypeRegistry *)parameterTypeRegistry {
  return IoCucumberCucumberexpressionsCucumberExpression_processParametersWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(self, expression, parameterTypeRegistry);
}

- (NSString *)buildCaptureRegexpWithJavaUtilList:(id<JavaUtilList>)regexps {
  return IoCucumberCucumberexpressionsCucumberExpression_buildCaptureRegexpWithJavaUtilList_(self, regexps);
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)text {
  return IoCucumberCucumberexpressionsArgument_buildWithIoCucumberCucumberexpressionsTreeRegexp_withJavaUtilList_withNSString_(treeRegexp_, parameterTypes_, text);
}

- (NSString *)getSource {
  return source_;
}

- (JavaUtilRegexPattern *)getRegexp {
  return [((IoCucumberCucumberexpressionsTreeRegexp *) nil_chk(treeRegexp_)) pattern];
}

- (void)dealloc {
  RELEASE_(parameterTypes_);
  RELEASE_(source_);
  RELEASE_(treeRegexp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 9, 2, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withIoCucumberCucumberexpressionsParameterTypeRegistry:);
  methods[1].selector = @selector(processEscapesWithNSString:);
  methods[2].selector = @selector(processAlternationWithNSString:);
  methods[3].selector = @selector(processOptionalWithNSString:);
  methods[4].selector = @selector(processParametersWithNSString:withIoCucumberCucumberexpressionsParameterTypeRegistry:);
  methods[5].selector = @selector(buildCaptureRegexpWithJavaUtilList:);
  methods[6].selector = @selector(matchWithNSString:);
  methods[7].selector = @selector(getSource);
  methods[8].selector = @selector(getRegexp);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ESCAPE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "PARAMETER_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "OPTIONAL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "DOUBLE_ESCAPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "parameterTypes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "source_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeRegexp_", "LIoCucumberCucumberexpressionsTreeRegexp;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LIoCucumberCucumberexpressionsParameterTypeRegistry;", "processEscapes", "LNSString;", "processAlternation", "processOptional", "processParameters", "buildCaptureRegexp", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "match", "(Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/Argument<*>;>;", &IoCucumberCucumberexpressionsCucumberExpression_ESCAPE_PATTERN, &IoCucumberCucumberexpressionsCucumberExpression_PARAMETER_PATTERN, &IoCucumberCucumberexpressionsCucumberExpression_OPTIONAL_PATTERN, &IoCucumberCucumberexpressionsCucumberExpression_ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP, &IoCucumberCucumberexpressionsCucumberExpression_DOUBLE_ESCAPE, "Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsCucumberExpression = { "CucumberExpression", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsCucumberExpression;
}

+ (void)initialize {
  if (self == [IoCucumberCucumberexpressionsCucumberExpression class]) {
    JreStrongAssign(&IoCucumberCucumberexpressionsCucumberExpression_ESCAPE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"([\\\\^\\[$.|?*+\\]])"));
    JreStrongAssign(&IoCucumberCucumberexpressionsCucumberExpression_PARAMETER_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\\\\\\\)?\\{([^}]+)\\}"));
    JreStrongAssign(&IoCucumberCucumberexpressionsCucumberExpression_OPTIONAL_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"(\\\\\\\\)?\\(([^)]+)\\)"));
    JreStrongAssign(&IoCucumberCucumberexpressionsCucumberExpression_ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP, JavaUtilRegexPattern_compileWithNSString_(@"([^\\s^/]+)((/[^\\s^/]+)+)"));
    J2OBJC_SET_INITIALIZED(IoCucumberCucumberexpressionsCucumberExpression)
  }
}

@end

void IoCucumberCucumberexpressionsCucumberExpression_initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->parameterTypes_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->source_, expression);
  expression = IoCucumberCucumberexpressionsCucumberExpression_processEscapesWithNSString_(self, expression);
  expression = IoCucumberCucumberexpressionsCucumberExpression_processOptionalWithNSString_(self, expression);
  expression = IoCucumberCucumberexpressionsCucumberExpression_processAlternationWithNSString_(self, expression);
  expression = IoCucumberCucumberexpressionsCucumberExpression_processParametersWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(self, expression, parameterTypeRegistry);
  expression = JreStrcat("C$C", '^', expression, '$');
  JreStrongAssignAndConsume(&self->treeRegexp_, new_IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(expression));
}

IoCucumberCucumberexpressionsCucumberExpression *new_IoCucumberCucumberexpressionsCucumberExpression_initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(NSString *expression, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsCucumberExpression, initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_, expression, parameterTypeRegistry)
}

IoCucumberCucumberexpressionsCucumberExpression *create_IoCucumberCucumberexpressionsCucumberExpression_initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(NSString *expression, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsCucumberExpression, initWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_, expression, parameterTypeRegistry)
}

NSString *IoCucumberCucumberexpressionsCucumberExpression_processEscapesWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression) {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_ESCAPE_PATTERN)) matcherWithJavaLangCharSequence:expression])) replaceAllWithNSString:@"\\\\$1"];
}

NSString *IoCucumberCucumberexpressionsCucumberExpression_processAlternationWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_ALTERNATIVE_NON_WHITESPACE_TEXT_REGEXP)) matcherWithJavaLangCharSequence:expression];
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    NSString *replacement = [((NSString *) nil_chk([((NSString *) nil_chk([matcher groupWithInt:0])) java_replace:'/' withChar:'|'])) java_replaceAll:@"\\\\\\|" withReplacement:@"/"];
    [matcher appendReplacementWithJavaLangStringBuffer:sb withNSString:JreStrcat("$$C", @"(?:", replacement, ')')];
  }
  [matcher appendTailWithJavaLangStringBuffer:sb];
  return [sb description];
}

NSString *IoCucumberCucumberexpressionsCucumberExpression_processOptionalWithNSString_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_OPTIONAL_PATTERN)) matcherWithJavaLangCharSequence:expression];
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    if ([((NSString *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_DOUBLE_ESCAPE)) isEqual:[matcher groupWithInt:1]]) {
      [matcher appendReplacementWithJavaLangStringBuffer:sb withNSString:JreStrcat("$$$", @"\\\\(", [matcher groupWithInt:2], @"\\\\)")];
    }
    else {
      [matcher appendReplacementWithJavaLangStringBuffer:sb withNSString:JreStrcat("$$$", @"(?:", [matcher groupWithInt:2], @")?")];
    }
  }
  [matcher appendTailWithJavaLangStringBuffer:sb];
  return [sb description];
}

NSString *IoCucumberCucumberexpressionsCucumberExpression_processParametersWithNSString_withIoCucumberCucumberexpressionsParameterTypeRegistry_(IoCucumberCucumberexpressionsCucumberExpression *self, NSString *expression, IoCucumberCucumberexpressionsParameterTypeRegistry *parameterTypeRegistry) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_PARAMETER_PATTERN)) matcherWithJavaLangCharSequence:expression];
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    if ([((NSString *) nil_chk(IoCucumberCucumberexpressionsCucumberExpression_DOUBLE_ESCAPE)) isEqual:[matcher groupWithInt:1]]) {
      [matcher appendReplacementWithJavaLangStringBuffer:sb withNSString:JreStrcat("$$$", @"\\\\{", [matcher groupWithInt:2], @"\\\\}")];
    }
    else {
      NSString *typeName = [matcher groupWithInt:2];
      IoCucumberCucumberexpressionsParameterType *parameterType = [((IoCucumberCucumberexpressionsParameterTypeRegistry *) nil_chk(parameterTypeRegistry)) lookupByTypeNameWithNSString:typeName];
      if (parameterType == nil) {
        @throw create_IoCucumberCucumberexpressionsUndefinedParameterTypeException_initWithNSString_(typeName);
      }
      [((id<JavaUtilList>) nil_chk(self->parameterTypes_)) addWithId:parameterType];
      [matcher appendReplacementWithJavaLangStringBuffer:sb withNSString:JavaUtilRegexMatcher_quoteReplacementWithNSString_(IoCucumberCucumberexpressionsCucumberExpression_buildCaptureRegexpWithJavaUtilList_(self, [parameterType getRegexps]))];
    }
  }
  [matcher appendTailWithJavaLangStringBuffer:sb];
  return [sb description];
}

NSString *IoCucumberCucumberexpressionsCucumberExpression_buildCaptureRegexpWithJavaUtilList_(IoCucumberCucumberexpressionsCucumberExpression *self, id<JavaUtilList> regexps) {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"(");
  if ([((id<JavaUtilList>) nil_chk(regexps)) size] == 1) {
    [sb appendWithNSString:[regexps getWithInt:0]];
  }
  else {
    jboolean bar = false;
    for (NSString * __strong captureGroupRegexp in regexps) {
      if (bar) [sb appendWithNSString:@"|"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"(?:"])) appendWithNSString:captureGroupRegexp])) appendWithNSString:@")"];
      bar = true;
    }
  }
  [sb appendWithNSString:@")"];
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsCucumberExpression)
