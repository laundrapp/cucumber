//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ParameterType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/CaptureGroupTransformer.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionException.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/Transformer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Type.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface IoCucumberCucumberexpressionsParameterType () {
 @public
  NSString *name_;
  id<JavaLangReflectType> type_;
  id<JavaUtilList> regexps_;
  jboolean preferForRegexpMatch_;
  jboolean useForSnippets_;
  id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterType, name_, NSString *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterType, type_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterType, regexps_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterType, transformer_, id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)

@interface IoCucumberCucumberexpressionsParameterType_TransformerAdaptor : NSObject < IoCucumberCucumberexpressionsCaptureGroupTransformer > {
 @public
  id<IoCucumberCucumberexpressionsTransformer> transformer_;
}

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer;

- (id)transformWithNSStringArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor)

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor, transformer_, id<IoCucumberCucumberexpressionsTransformer>)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *self, id<IoCucumberCucumberexpressionsTransformer> transformer);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *new_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(id<IoCucumberCucumberexpressionsTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *create_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(id<IoCucumberCucumberexpressionsTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor)

@implementation IoCucumberCucumberexpressionsParameterType

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                   withJavaLangReflectType:(id<JavaLangReflectType>)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(self, name, regexps, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(self, name, regexp, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                   withJavaLangReflectType:(id<JavaLangReflectType>)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(self, name, regexps, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(self, name, regexp, type, transformer);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (id<JavaLangReflectType>)getType {
  return type_;
}

- (id<JavaUtilList>)getRegexps {
  return regexps_;
}

- (jboolean)preferForRegexpMatch {
  return preferForRegexpMatch_;
}

- (jboolean)useForSnippets {
  return useForSnippets_;
}

- (id)transformWithJavaUtilList:(id<JavaUtilList>)groupValues {
  if ([transformer_ isKindOfClass:[IoCucumberCucumberexpressionsParameterType_TransformerAdaptor class]]) {
    if ([((id<JavaUtilList>) nil_chk(groupValues)) size] > 1) @throw create_IoCucumberCucumberexpressionsCucumberExpressionException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"ParameterType {%s} was registered with a Transformer but has multiple capture groups %s. Did you mean to use a CaptureGroupTransformer?", [IOSObjectArray arrayWithObjects:(id[]){ name_, regexps_ } count:2 type:NSObject_class_()]));
  }
  @try {
    IOSObjectArray *groupValueArray = [((id<JavaUtilList>) nil_chk(groupValues)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[groupValues size] type:NSString_class_()]];
    return [((id<IoCucumberCucumberexpressionsCaptureGroupTransformer>) nil_chk(transformer_)) transformWithNSStringArray:groupValueArray];
  }
  @catch (JavaLangThrowable *throwable) {
    @throw create_IoCucumberCucumberexpressionsCucumberExpressionException_initWithNSString_withJavaLangThrowable_(NSString_java_formatWithNSString_withNSObjectArray_(@"ParameterType {%s} failed to transform %s to %s", [IOSObjectArray arrayWithObjects:(id[]){ name_, groupValues, type_ } count:3 type:NSObject_class_()]), throwable);
  }
}

- (jint)compareToWithId:(IoCucumberCucumberexpressionsParameterType *)o {
  if ([self preferForRegexpMatch] && ![((IoCucumberCucumberexpressionsParameterType *) nil_chk(o)) preferForRegexpMatch]) return -1;
  if ([((IoCucumberCucumberexpressionsParameterType *) nil_chk(o)) preferForRegexpMatch] && ![self preferForRegexpMatch]) return 1;
  return [((NSString *) nil_chk([self getName])) compareToWithId:[o getName]];
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(type_);
  RELEASE_(regexps_);
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, 9, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, 11, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, 13, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, 15, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, 17, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 21, 22, -1, 23, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaUtilList:withJavaLangReflectType:withIoCucumberCucumberexpressionsCaptureGroupTransformer:withBoolean:withBoolean:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilList:withIOSClass:withIoCucumberCucumberexpressionsCaptureGroupTransformer:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithNSString:withNSString:withIOSClass:withIoCucumberCucumberexpressionsCaptureGroupTransformer:withBoolean:withBoolean:);
  methods[3].selector = @selector(initWithNSString:withJavaUtilList:withIOSClass:withIoCucumberCucumberexpressionsCaptureGroupTransformer:);
  methods[4].selector = @selector(initWithNSString:withNSString:withIOSClass:withIoCucumberCucumberexpressionsCaptureGroupTransformer:);
  methods[5].selector = @selector(initWithNSString:withJavaUtilList:withJavaLangReflectType:withIoCucumberCucumberexpressionsTransformer:withBoolean:withBoolean:);
  methods[6].selector = @selector(initWithNSString:withJavaUtilList:withIOSClass:withIoCucumberCucumberexpressionsTransformer:withBoolean:withBoolean:);
  methods[7].selector = @selector(initWithNSString:withNSString:withIOSClass:withIoCucumberCucumberexpressionsTransformer:withBoolean:withBoolean:);
  methods[8].selector = @selector(initWithNSString:withJavaUtilList:withIOSClass:withIoCucumberCucumberexpressionsTransformer:);
  methods[9].selector = @selector(initWithNSString:withNSString:withIOSClass:withIoCucumberCucumberexpressionsTransformer:);
  methods[10].selector = @selector(getName);
  methods[11].selector = @selector(getType);
  methods[12].selector = @selector(getRegexps);
  methods[13].selector = @selector(preferForRegexpMatch);
  methods[14].selector = @selector(useForSnippets);
  methods[15].selector = @selector(transformWithJavaUtilList:);
  methods[16].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "regexps_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "preferForRegexpMatch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useForSnippets_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transformer_", "LIoCucumberCucumberexpressionsCaptureGroupTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilList;LJavaLangReflectType;LIoCucumberCucumberexpressionsCaptureGroupTransformer;ZZ", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/reflect/Type;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;ZZ)V", "LNSString;LJavaUtilList;LIOSClass;LIoCucumberCucumberexpressionsCaptureGroupTransformer;ZZ", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;ZZ)V", "LNSString;LNSString;LIOSClass;LIoCucumberCucumberexpressionsCaptureGroupTransformer;ZZ", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;ZZ)V", "LNSString;LJavaUtilList;LIOSClass;LIoCucumberCucumberexpressionsCaptureGroupTransformer;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;)V", "LNSString;LNSString;LIOSClass;LIoCucumberCucumberexpressionsCaptureGroupTransformer;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;)V", "LNSString;LJavaUtilList;LJavaLangReflectType;LIoCucumberCucumberexpressionsTransformer;ZZ", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/reflect/Type;Lio/cucumber/cucumberexpressions/Transformer<TT;>;ZZ)V", "LNSString;LJavaUtilList;LIOSClass;LIoCucumberCucumberexpressionsTransformer;ZZ", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/Transformer<TT;>;ZZ)V", "LNSString;LNSString;LIOSClass;LIoCucumberCucumberexpressionsTransformer;ZZ", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/Transformer<TT;>;ZZ)V", "LNSString;LJavaUtilList;LIOSClass;LIoCucumberCucumberexpressionsTransformer;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/Transformer<TT;>;)V", "LNSString;LNSString;LIOSClass;LIoCucumberCucumberexpressionsTransformer;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class<TT;>;Lio/cucumber/cucumberexpressions/Transformer<TT;>;)V", "()Ljava/util/List<Ljava/lang/String;>;", "transform", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)TT;", "compareTo", "LIoCucumberCucumberexpressionsParameterType;", "(Lio/cucumber/cucumberexpressions/ParameterType<*>;)I", "Ljava/util/List<Ljava/lang/String;>;", "Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;", "LIoCucumberCucumberexpressionsParameterType_TransformerAdaptor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Comparable<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterType = { "ParameterType", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x11, 17, 6, -1, 29, -1, 30, -1 };
  return &_IoCucumberCucumberexpressionsParameterType;
}

@end

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  NSObject_init(self);
  if (name == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"name cannot be null");
  if (regexps == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"regexps cannot be null");
  if (type == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"type cannot be null");
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->regexps_, regexps);
  JreStrongAssign(&self->type_, type);
  JreStrongAssign(&self->transformer_, transformer);
  self->useForSnippets_ = useForSnippets;
  self->preferForRegexpMatch_ = preferForRegexpMatch;
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, JavaUtilCollections_singletonListWithId_(regexp), type, transformer, useForSnippets, preferForRegexpMatch);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, true, false);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_, name, regexps, type, transformer)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_, name, regexps, type, transformer)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, JavaUtilCollections_singletonListWithId_(regexp), type, transformer, true, false);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_, name, regexp, type, transformer)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_, name, regexp, type, transformer)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(self, name, regexps, type, create_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(transformer), useForSnippets, preferForRegexpMatch);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexps, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, JavaUtilCollections_singletonListWithId_(regexp), type, transformer, useForSnippets, preferForRegexpMatch);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_, name, regexp, type, transformer, useForSnippets, preferForRegexpMatch)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, regexps, type, transformer, true, false);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_, name, regexps, type, transformer)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_, name, regexps, type, transformer)
}

void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(self, name, JavaUtilCollections_singletonListWithId_(regexp), type, transformer, true, false);
}

IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_, name, regexp, type, transformer)
}

IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType, initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_, name, regexp, type, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsParameterType)

@implementation IoCucumberCucumberexpressionsParameterType_TransformerAdaptor

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer {
  IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(self, transformer);
  return self;
}

- (id)transformWithNSStringArray:(IOSObjectArray *)args {
  return [((id<IoCucumberCucumberexpressionsTransformer>) nil_chk(transformer_)) transformWithNSString:((IOSObjectArray *) nil_chk(args))->size_ == 0 ? nil : IOSObjectArray_Get(args, 0)];
}

- (void)dealloc {
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsTransformer:);
  methods[1].selector = @selector(transformWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformer_", "LIoCucumberCucumberexpressionsTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberCucumberexpressionsTransformer;", "(Lio/cucumber/cucumberexpressions/Transformer<TT;>;)V", "transform", "[LNSString;", "LJavaLangThrowable;", "([Ljava/lang/String;)TT;", "Lio/cucumber/cucumberexpressions/Transformer<TT;>;", "LIoCucumberCucumberexpressionsParameterType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/cucumber/cucumberexpressions/CaptureGroupTransformer<TT;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterType_TransformerAdaptor = { "TransformerAdaptor", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1a, 2, 1, 7, -1, -1, 8, -1 };
  return &_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor;
}

@end

void IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *self, id<IoCucumberCucumberexpressionsTransformer> transformer) {
  NSObject_init(self);
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *new_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor, initWithIoCucumberCucumberexpressionsTransformer_, transformer)
}

IoCucumberCucumberexpressionsParameterType_TransformerAdaptor *create_IoCucumberCucumberexpressionsParameterType_TransformerAdaptor_initWithIoCucumberCucumberexpressionsTransformer_(id<IoCucumberCucumberexpressionsTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor, initWithIoCucumberCucumberexpressionsTransformer_, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsParameterType_TransformerAdaptor)
