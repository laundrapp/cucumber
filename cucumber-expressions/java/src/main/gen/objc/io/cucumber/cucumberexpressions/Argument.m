//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/Argument.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Argument.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionException.h"
#include "io/cucumber/cucumberexpressions/Group.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/TreeRegexp.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsArgument () {
 @public
  IoCucumberCucumberexpressionsParameterType *parameterType_;
  IoCucumberCucumberexpressionsGroup *group_;
}

+ (id<JavaUtilList>)getParameterTypeNamesWithJavaUtilList:(id<JavaUtilList>)parameterTypes;

+ (id<JavaUtilList>)getGroupValuesWithJavaUtilList:(id<JavaUtilList>)argGroups;

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsArgument, parameterType_, IoCucumberCucumberexpressionsParameterType *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsArgument, group_, IoCucumberCucumberexpressionsGroup *)

__attribute__((unused)) static id<JavaUtilList> IoCucumberCucumberexpressionsArgument_getParameterTypeNamesWithJavaUtilList_(id<JavaUtilList> parameterTypes);

__attribute__((unused)) static id<JavaUtilList> IoCucumberCucumberexpressionsArgument_getGroupValuesWithJavaUtilList_(id<JavaUtilList> argGroups);

@implementation IoCucumberCucumberexpressionsArgument

+ (id<JavaUtilList>)buildWithIoCucumberCucumberexpressionsTreeRegexp:(IoCucumberCucumberexpressionsTreeRegexp *)treeRegexp
                                                    withJavaUtilList:(id<JavaUtilList>)parameterTypes
                                                        withNSString:(NSString *)text {
  return IoCucumberCucumberexpressionsArgument_buildWithIoCucumberCucumberexpressionsTreeRegexp_withJavaUtilList_withNSString_(treeRegexp, parameterTypes, text);
}

+ (id<JavaUtilList>)getParameterTypeNamesWithJavaUtilList:(id<JavaUtilList>)parameterTypes {
  return IoCucumberCucumberexpressionsArgument_getParameterTypeNamesWithJavaUtilList_(parameterTypes);
}

+ (id<JavaUtilList>)getGroupValuesWithJavaUtilList:(id<JavaUtilList>)argGroups {
  return IoCucumberCucumberexpressionsArgument_getGroupValuesWithJavaUtilList_(argGroups);
}

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsGroup:(IoCucumberCucumberexpressionsGroup *)group
                      withIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType {
  IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(self, group, parameterType);
  return self;
}

- (IoCucumberCucumberexpressionsGroup *)getGroup {
  return group_;
}

- (id)getValue {
  return [((IoCucumberCucumberexpressionsParameterType *) nil_chk(parameterType_)) transformWithJavaUtilList:[((IoCucumberCucumberexpressionsGroup *) nil_chk(group_)) getValues]];
}

- (void)dealloc {
  RELEASE_(parameterType_);
  RELEASE_(group_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 6, 4, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, 9, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsGroup;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(buildWithIoCucumberCucumberexpressionsTreeRegexp:withJavaUtilList:withNSString:);
  methods[1].selector = @selector(getParameterTypeNamesWithJavaUtilList:);
  methods[2].selector = @selector(getGroupValuesWithJavaUtilList:);
  methods[3].selector = @selector(initWithIoCucumberCucumberexpressionsGroup:withIoCucumberCucumberexpressionsParameterType:);
  methods[4].selector = @selector(getGroup);
  methods[5].selector = @selector(getValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameterType_", "LIoCucumberCucumberexpressionsParameterType;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "group_", "LIoCucumberCucumberexpressionsGroup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "build", "LIoCucumberCucumberexpressionsTreeRegexp;LJavaUtilList;LNSString;", "(Lio/cucumber/cucumberexpressions/TreeRegexp;Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/Argument<*>;>;", "getParameterTypeNames", "LJavaUtilList;", "(Ljava/util/List<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;)Ljava/util/List<Ljava/lang/String;>;", "getGroupValues", "(Ljava/util/List<Lio/cucumber/cucumberexpressions/Group;>;)Ljava/util/List<Ljava/lang/Object;>;", "LIoCucumberCucumberexpressionsGroup;LIoCucumberCucumberexpressionsParameterType;", "(Lio/cucumber/cucumberexpressions/Group;Lio/cucumber/cucumberexpressions/ParameterType<TT;>;)V", "()TT;", "Lio/cucumber/cucumberexpressions/ParameterType<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsArgument = { "Argument", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 12, -1 };
  return &_IoCucumberCucumberexpressionsArgument;
}

@end

id<JavaUtilList> IoCucumberCucumberexpressionsArgument_buildWithIoCucumberCucumberexpressionsTreeRegexp_withJavaUtilList_withNSString_(IoCucumberCucumberexpressionsTreeRegexp *treeRegexp, id<JavaUtilList> parameterTypes, NSString *text) {
  IoCucumberCucumberexpressionsArgument_initialize();
  IoCucumberCucumberexpressionsGroup *group = [((IoCucumberCucumberexpressionsTreeRegexp *) nil_chk(treeRegexp)) matchWithJavaLangCharSequence:text];
  if (group == nil) return nil;
  id<JavaUtilList> argGroups = [group getChildren];
  if ([((id<JavaUtilList>) nil_chk(argGroups)) size] != [((id<JavaUtilList>) nil_chk(parameterTypes)) size]) {
    @throw create_IoCucumberCucumberexpressionsCucumberExpressionException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expression /%s/ has %s capture groups (%s), but there were %s parameter types (%s)", [IOSObjectArray arrayWithObjects:(id[]){ [((JavaUtilRegexPattern *) nil_chk([treeRegexp pattern])) pattern], JavaLangInteger_valueOfWithInt_([argGroups size]), IoCucumberCucumberexpressionsArgument_getGroupValuesWithJavaUtilList_(argGroups), JavaLangInteger_valueOfWithInt_([parameterTypes size]), IoCucumberCucumberexpressionsArgument_getParameterTypeNamesWithJavaUtilList_(parameterTypes) } count:5 type:NSObject_class_()]));
  }
  id<JavaUtilList> args = create_JavaUtilArrayList_initWithInt_([argGroups size]);
  for (jint i = 0; i < [parameterTypes size]; i++) {
    IoCucumberCucumberexpressionsGroup *argGroup = [argGroups getWithInt:i];
    IoCucumberCucumberexpressionsParameterType *parameterType = [parameterTypes getWithInt:i];
    [args addWithId:create_IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(argGroup, parameterType)];
  }
  return args;
}

id<JavaUtilList> IoCucumberCucumberexpressionsArgument_getParameterTypeNamesWithJavaUtilList_(id<JavaUtilList> parameterTypes) {
  IoCucumberCucumberexpressionsArgument_initialize();
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  for (IoCucumberCucumberexpressionsParameterType * __strong type in nil_chk(parameterTypes)) {
    NSString *name = [((IoCucumberCucumberexpressionsParameterType *) nil_chk(type)) getName];
    [list addWithId:name];
  }
  return list;
}

id<JavaUtilList> IoCucumberCucumberexpressionsArgument_getGroupValuesWithJavaUtilList_(id<JavaUtilList> argGroups) {
  IoCucumberCucumberexpressionsArgument_initialize();
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  for (IoCucumberCucumberexpressionsGroup * __strong argGroup in nil_chk(argGroups)) {
    NSString *value = [((IoCucumberCucumberexpressionsGroup *) nil_chk(argGroup)) getValue];
    [list addWithId:value];
  }
  return list;
}

void IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsArgument *self, IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType) {
  NSObject_init(self);
  JreStrongAssign(&self->group_, group);
  JreStrongAssign(&self->parameterType_, parameterType);
}

IoCucumberCucumberexpressionsArgument *new_IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsArgument, initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_, group, parameterType)
}

IoCucumberCucumberexpressionsArgument *create_IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsArgument, initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_, group, parameterType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsArgument)
