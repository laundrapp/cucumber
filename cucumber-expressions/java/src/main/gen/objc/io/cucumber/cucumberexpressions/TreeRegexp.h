//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/TreeRegexp.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsTreeRegexp")
#ifdef RESTRICT_IoCucumberCucumberexpressionsTreeRegexp
#define INCLUDE_ALL_IoCucumberCucumberexpressionsTreeRegexp 0
#else
#define INCLUDE_ALL_IoCucumberCucumberexpressionsTreeRegexp 1
#endif
#undef RESTRICT_IoCucumberCucumberexpressionsTreeRegexp

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberCucumberexpressionsTreeRegexp_) && (INCLUDE_ALL_IoCucumberCucumberexpressionsTreeRegexp || defined(INCLUDE_IoCucumberCucumberexpressionsTreeRegexp))
#define IoCucumberCucumberexpressionsTreeRegexp_

@class IoCucumberCucumberexpressionsGroup;
@class IoCucumberCucumberexpressionsGroupBuilder;
@class JavaUtilRegexPattern;
@protocol JavaLangCharSequence;

/*!
 @brief TreeRegexp represents matches as a tree of <code>Group</code>
  reflecting the nested structure of capture groups in the original
  regexp.
 */
@interface IoCucumberCucumberexpressionsTreeRegexp : NSObject

#pragma mark Public

- (IoCucumberCucumberexpressionsGroupBuilder *)getGroupBuilder;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

- (instancetype __nonnull)initWithNSString:(NSString *)regexp;

- (IoCucumberCucumberexpressionsGroup *)matchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

- (JavaUtilRegexPattern *)pattern;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsTreeRegexp)

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(IoCucumberCucumberexpressionsTreeRegexp *self, NSString *regexp);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsTreeRegexp *new_IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(NSString *regexp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsTreeRegexp *create_IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(NSString *regexp);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(IoCucumberCucumberexpressionsTreeRegexp *self, JavaUtilRegexPattern *pattern);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsTreeRegexp *new_IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsTreeRegexp *create_IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsTreeRegexp)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsTreeRegexp")
