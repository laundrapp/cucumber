//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ParameterType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsParameterType")
#ifdef RESTRICT_IoCucumberCucumberexpressionsParameterType
#define INCLUDE_ALL_IoCucumberCucumberexpressionsParameterType 0
#else
#define INCLUDE_ALL_IoCucumberCucumberexpressionsParameterType 1
#endif
#undef RESTRICT_IoCucumberCucumberexpressionsParameterType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberCucumberexpressionsParameterType_) && (INCLUDE_ALL_IoCucumberCucumberexpressionsParameterType || defined(INCLUDE_IoCucumberCucumberexpressionsParameterType))
#define IoCucumberCucumberexpressionsParameterType_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSClass;
@protocol IoCucumberCucumberexpressionsCaptureGroupTransformer;
@protocol IoCucumberCucumberexpressionsTransformer;
@protocol JavaLangReflectType;
@protocol JavaUtilList;

@interface IoCucumberCucumberexpressionsParameterType : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                   withJavaLangReflectType:(id<JavaLangReflectType>)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                          withJavaUtilList:(id<JavaUtilList>)regexps
                   withJavaLangReflectType:(id<JavaLangReflectType>)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsCaptureGroupTransformer:(id<IoCucumberCucumberexpressionsCaptureGroupTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)regexp
                              withIOSClass:(IOSClass *)type
withIoCucumberCucumberexpressionsTransformer:(id<IoCucumberCucumberexpressionsTransformer>)transformer
                               withBoolean:(jboolean)useForSnippets
                               withBoolean:(jboolean)preferForRegexpMatch;

- (jint)compareToWithId:(IoCucumberCucumberexpressionsParameterType *)o;

/*!
 @brief This is used in the type name in typed expressions
 @return human readable type name
 */
- (NSString *)getName;

- (id<JavaUtilList>)getRegexps;

/*!
 @brief Returns the type of the parameter type - typically the type
  the transform transforms to.This can be used in conjunction with
  GeneratedExpression (snippets) to generate snippets for statically typed
  languages.
 Not used for anything else.
 @return the type of the parameter type
 */
- (id<JavaLangReflectType>)getType;

/*!
 @brief Indicates whether or not this is a preferential parameter type when matching text
  against a <code>RegularExpression</code>.In case there are multiple parameter types
  with a regexp identical to the capture group's regexp, a preferential parameter type will
  win.
 If there are more than 1 preferential ones, an error will be thrown.
 @return true if this is a preferential type
 */
- (jboolean)preferForRegexpMatch;

/*!
 @brief Indicates whether or not this is a parameter type that should be used for generating 
 <code>GeneratedExpression</code>s from text.Typically, parameter types with greedy regexps
  should return false.
 @return true is this parameter type is used for expression generation
 */
- (jboolean)useForSnippets;

#pragma mark Package-Private

- (id)transformWithJavaUtilList:(id<JavaUtilList>)groupValues;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterType)

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsCaptureGroupTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsCaptureGroupTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withJavaLangReflectType_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, id<JavaLangReflectType> type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer, jboolean useForSnippets, jboolean preferForRegexpMatch);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, id<JavaUtilList> regexps, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(IoCucumberCucumberexpressionsParameterType *self, NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *new_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterType *create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withNSString_withIOSClass_withIoCucumberCucumberexpressionsTransformer_(NSString *name, NSString *regexp, IOSClass *type, id<IoCucumberCucumberexpressionsTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsParameterType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsParameterType")
