//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/Argument.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsArgument")
#ifdef RESTRICT_IoCucumberCucumberexpressionsArgument
#define INCLUDE_ALL_IoCucumberCucumberexpressionsArgument 0
#else
#define INCLUDE_ALL_IoCucumberCucumberexpressionsArgument 1
#endif
#undef RESTRICT_IoCucumberCucumberexpressionsArgument

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberCucumberexpressionsArgument_) && (INCLUDE_ALL_IoCucumberCucumberexpressionsArgument || defined(INCLUDE_IoCucumberCucumberexpressionsArgument))
#define IoCucumberCucumberexpressionsArgument_

@class IoCucumberCucumberexpressionsGroup;
@class IoCucumberCucumberexpressionsParameterType;
@class IoCucumberCucumberexpressionsTreeRegexp;
@protocol JavaUtilList;

@interface IoCucumberCucumberexpressionsArgument : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsGroup:(IoCucumberCucumberexpressionsGroup *)group
                      withIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType;

- (IoCucumberCucumberexpressionsGroup *)getGroup;

- (id)getValue;

#pragma mark Package-Private

+ (id<JavaUtilList>)buildWithIoCucumberCucumberexpressionsTreeRegexp:(IoCucumberCucumberexpressionsTreeRegexp *)treeRegexp
                                                    withJavaUtilList:(id<JavaUtilList>)parameterTypes
                                                        withNSString:(NSString *)text;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsArgument)

FOUNDATION_EXPORT id<JavaUtilList> IoCucumberCucumberexpressionsArgument_buildWithIoCucumberCucumberexpressionsTreeRegexp_withJavaUtilList_withNSString_(IoCucumberCucumberexpressionsTreeRegexp *treeRegexp, id<JavaUtilList> parameterTypes, NSString *text);

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsArgument *self, IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsArgument *new_IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsArgument *create_IoCucumberCucumberexpressionsArgument_initWithIoCucumberCucumberexpressionsGroup_withIoCucumberCucumberexpressionsParameterType_(IoCucumberCucumberexpressionsGroup *group, IoCucumberCucumberexpressionsParameterType *parameterType);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsArgument)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsArgument")
