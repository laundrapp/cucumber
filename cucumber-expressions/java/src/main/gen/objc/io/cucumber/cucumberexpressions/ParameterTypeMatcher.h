//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ParameterTypeMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsParameterTypeMatcher")
#ifdef RESTRICT_IoCucumberCucumberexpressionsParameterTypeMatcher
#define INCLUDE_ALL_IoCucumberCucumberexpressionsParameterTypeMatcher 0
#else
#define INCLUDE_ALL_IoCucumberCucumberexpressionsParameterTypeMatcher 1
#endif
#undef RESTRICT_IoCucumberCucumberexpressionsParameterTypeMatcher

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberCucumberexpressionsParameterTypeMatcher_) && (INCLUDE_ALL_IoCucumberCucumberexpressionsParameterTypeMatcher || defined(INCLUDE_IoCucumberCucumberexpressionsParameterTypeMatcher))
#define IoCucumberCucumberexpressionsParameterTypeMatcher_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IoCucumberCucumberexpressionsParameterType;
@class JavaUtilRegexMatcher;

@interface IoCucumberCucumberexpressionsParameterTypeMatcher : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType
                                                    withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher
                                                                     withInt:(jint)textLength;

- (IoCucumberCucumberexpressionsParameterTypeMatcher *)advanceToWithInt:(jint)newMatchPos;

- (jint)compareToWithId:(IoCucumberCucumberexpressionsParameterTypeMatcher *)o;

- (jboolean)find;

- (IoCucumberCucumberexpressionsParameterType *)getParameterType;

- (NSString *)group;

- (jint)start;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeMatcher)

FOUNDATION_EXPORT void IoCucumberCucumberexpressionsParameterTypeMatcher_initWithIoCucumberCucumberexpressionsParameterType_withJavaUtilRegexMatcher_withInt_(IoCucumberCucumberexpressionsParameterTypeMatcher *self, IoCucumberCucumberexpressionsParameterType *parameterType, JavaUtilRegexMatcher *matcher, jint textLength);

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterTypeMatcher *new_IoCucumberCucumberexpressionsParameterTypeMatcher_initWithIoCucumberCucumberexpressionsParameterType_withJavaUtilRegexMatcher_withInt_(IoCucumberCucumberexpressionsParameterType *parameterType, JavaUtilRegexMatcher *matcher, jint textLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberCucumberexpressionsParameterTypeMatcher *create_IoCucumberCucumberexpressionsParameterTypeMatcher_initWithIoCucumberCucumberexpressionsParameterType_withJavaUtilRegexMatcher_withInt_(IoCucumberCucumberexpressionsParameterType *parameterType, JavaUtilRegexMatcher *matcher, jint textLength);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsParameterTypeMatcher)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberCucumberexpressionsParameterTypeMatcher")
