//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/Expression.java
//

#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Expression.h"

@interface IoCucumberCucumberexpressionsExpression : NSObject

@end

@implementation IoCucumberCucumberexpressionsExpression

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(matchWithNSString:);
  methods[1].selector = @selector(getRegexp);
  methods[2].selector = @selector(getSource);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lio/cucumber/cucumberexpressions/Argument<*>;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsExpression = { "Expression", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x609, 3, 0, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsExpression;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsExpression)
