//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/TreeRegexp.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/Group.h"
#include "io/cucumber/cucumberexpressions/GroupBuilder.h"
#include "io/cucumber/cucumberexpressions/TreeRegexp.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsTreeRegexp () {
 @public
  JavaUtilRegexPattern *pattern_;
  IoCucumberCucumberexpressionsGroupBuilder *groupBuilder_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsTreeRegexp, pattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsTreeRegexp, groupBuilder_, IoCucumberCucumberexpressionsGroupBuilder *)

@interface IoCucumberCucumberexpressionsTreeRegexp_IntRange : NSObject < JavaUtilIterator > {
 @public
  jint endExclusive_;
  jint n_;
}

- (instancetype __nonnull)initWithInt:(jint)startInclusive
                              withInt:(jint)endExclusive;

- (jboolean)hasNext;

- (JavaLangInteger *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsTreeRegexp_IntRange)

__attribute__((unused)) static void IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(IoCucumberCucumberexpressionsTreeRegexp_IntRange *self, jint startInclusive, jint endExclusive);

__attribute__((unused)) static IoCucumberCucumberexpressionsTreeRegexp_IntRange *new_IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(jint startInclusive, jint endExclusive) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsTreeRegexp_IntRange *create_IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(jint startInclusive, jint endExclusive);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberCucumberexpressionsTreeRegexp_IntRange)

@implementation IoCucumberCucumberexpressionsTreeRegexp

- (instancetype __nonnull)initWithNSString:(NSString *)regexp {
  IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(self, regexp);
  return self;
}

- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (JavaUtilRegexPattern *)pattern {
  return pattern_;
}

- (IoCucumberCucumberexpressionsGroup *)matchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:s];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) return nil;
  return [((IoCucumberCucumberexpressionsGroupBuilder *) nil_chk(groupBuilder_)) buildWithJavaUtilRegexMatcher:matcher withJavaUtilIterator:create_IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(0, [matcher groupCount] + 1)];
}

- (IoCucumberCucumberexpressionsGroupBuilder *)getGroupBuilder {
  return groupBuilder_;
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(groupBuilder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsGroup;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsGroupBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[2].selector = @selector(pattern);
  methods[3].selector = @selector(matchWithJavaLangCharSequence:);
  methods[4].selector = @selector(getGroupBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "groupBuilder_", "LIoCucumberCucumberexpressionsGroupBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaUtilRegexPattern;", "match", "LJavaLangCharSequence;", "LIoCucumberCucumberexpressionsTreeRegexp_IntRange;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsTreeRegexp = { "TreeRegexp", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, 4, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsTreeRegexp;
}

@end

void IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(IoCucumberCucumberexpressionsTreeRegexp *self, NSString *regexp) {
  IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(self, JavaUtilRegexPattern_compileWithNSString_(regexp));
}

IoCucumberCucumberexpressionsTreeRegexp *new_IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(NSString *regexp) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsTreeRegexp, initWithNSString_, regexp)
}

IoCucumberCucumberexpressionsTreeRegexp *create_IoCucumberCucumberexpressionsTreeRegexp_initWithNSString_(NSString *regexp) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsTreeRegexp, initWithNSString_, regexp)
}

void IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(IoCucumberCucumberexpressionsTreeRegexp *self, JavaUtilRegexPattern *pattern) {
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, pattern);
  NSString *source = [((JavaUtilRegexPattern *) nil_chk(pattern)) pattern];
  IOSCharArray *chars = [((NSString *) nil_chk(source)) java_toCharArray];
  id<JavaUtilDeque> stack = create_JavaUtilArrayDeque_init();
  id<JavaUtilDeque> groupStartStack = create_JavaUtilArrayDeque_init();
  [stack pushWithId:create_IoCucumberCucumberexpressionsGroupBuilder_init()];
  jchar last = 0;
  jboolean escaping = false;
  jboolean nonCapturingMaybe = false;
  jint n = 1;
  {
    IOSCharArray *a__ = chars;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      if (c == '(' && !escaping) {
        [stack pushWithId:create_IoCucumberCucumberexpressionsGroupBuilder_init()];
        [groupStartStack pushWithId:JavaLangInteger_valueOfWithInt_(n)];
        nonCapturingMaybe = false;
      }
      else if (c == ')' && !escaping) {
        IoCucumberCucumberexpressionsGroupBuilder *gb = [stack pop];
        jint groupStart = [((JavaLangInteger *) nil_chk([groupStartStack pop])) intValue];
        if ([((IoCucumberCucumberexpressionsGroupBuilder *) nil_chk(gb)) isCapturing]) {
          [gb setSourceWithNSString:[source java_substring:groupStart endIndex:n - 1]];
          [((IoCucumberCucumberexpressionsGroupBuilder *) nil_chk([stack peek])) addWithIoCucumberCucumberexpressionsGroupBuilder:gb];
        }
        else {
          [gb moveChildrenToWithIoCucumberCucumberexpressionsGroupBuilder:[stack peek]];
        }
        nonCapturingMaybe = false;
      }
      else if (c == '?' && last == '(') {
        nonCapturingMaybe = true;
      }
      else if (c == ':' && nonCapturingMaybe) {
        [((IoCucumberCucumberexpressionsGroupBuilder *) nil_chk([stack peek])) setNonCapturing];
        nonCapturingMaybe = false;
      }
      escaping = (c == '\\' && !escaping);
      last = c;
      n++;
    }
  }
  JreStrongAssign(&self->groupBuilder_, [stack pop]);
}

IoCucumberCucumberexpressionsTreeRegexp *new_IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsTreeRegexp, initWithJavaUtilRegexPattern_, pattern)
}

IoCucumberCucumberexpressionsTreeRegexp *create_IoCucumberCucumberexpressionsTreeRegexp_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsTreeRegexp, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsTreeRegexp)

@implementation IoCucumberCucumberexpressionsTreeRegexp_IntRange

- (instancetype __nonnull)initWithInt:(jint)startInclusive
                              withInt:(jint)endExclusive {
  IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(self, startInclusive, endExclusive);
  return self;
}

- (jboolean)hasNext {
  return n_ < endExclusive_;
}

- (JavaLangInteger *)next {
  if (![self hasNext]) {
    @throw create_JavaUtilNoSuchElementException_init();
  }
  return JavaLangInteger_valueOfWithInt_(n_++);
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "endExclusive_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LIoCucumberCucumberexpressionsTreeRegexp;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsTreeRegexp_IntRange = { "IntRange", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0xa, 4, 2, 1, -1, -1, 2, -1 };
  return &_IoCucumberCucumberexpressionsTreeRegexp_IntRange;
}

@end

void IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(IoCucumberCucumberexpressionsTreeRegexp_IntRange *self, jint startInclusive, jint endExclusive) {
  NSObject_init(self);
  self->endExclusive_ = endExclusive;
  self->n_ = startInclusive;
}

IoCucumberCucumberexpressionsTreeRegexp_IntRange *new_IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(jint startInclusive, jint endExclusive) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsTreeRegexp_IntRange, initWithInt_withInt_, startInclusive, endExclusive)
}

IoCucumberCucumberexpressionsTreeRegexp_IntRange *create_IoCucumberCucumberexpressionsTreeRegexp_IntRange_initWithInt_withInt_(jint startInclusive, jint endExclusive) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsTreeRegexp_IntRange, initWithInt_withInt_, startInclusive, endExclusive)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsTreeRegexp_IntRange)
