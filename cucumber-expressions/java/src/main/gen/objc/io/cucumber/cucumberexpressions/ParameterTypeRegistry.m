//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/cucumber/cucumber-expressions/java/src/main/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/cucumberexpressions/AmbiguousParameterTypeException.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionException.h"
#include "io/cucumber/cucumberexpressions/CucumberExpressionGenerator.h"
#include "io/cucumber/cucumberexpressions/DuplicateTypeNameException.h"
#include "io/cucumber/cucumberexpressions/NumberParser.h"
#include "io/cucumber/cucumberexpressions/ParameterType.h"
#include "io/cucumber/cucumberexpressions/ParameterTypeRegistry.h"
#include "io/cucumber/cucumberexpressions/Transformer.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/text/NumberFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "java/util/regex/Pattern.h"

@interface IoCucumberCucumberexpressionsParameterTypeRegistry () {
 @public
  id<JavaUtilMap> parameterTypeByName_;
  id<JavaUtilMap> parameterTypesByRegexp_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterTypeRegistry, parameterTypeByName_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(IoCucumberCucumberexpressionsParameterTypeRegistry, parameterTypesByRegexp_, id<JavaUtilMap>)

inline id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_get_INTEGER_REGEXPS(void);
static id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsParameterTypeRegistry, INTEGER_REGEXPS, id<JavaUtilList>)

inline id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_get_FLOAT_REGEXPS(void);
static id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsParameterTypeRegistry, FLOAT_REGEXPS, id<JavaUtilList>)

inline id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_get_WORD_REGEXPS(void);
static id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_WORD_REGEXPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsParameterTypeRegistry, WORD_REGEXPS, id<JavaUtilList>)

inline id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_get_STRING_REGEXPS(void);
static id<JavaUtilList> IoCucumberCucumberexpressionsParameterTypeRegistry_STRING_REGEXPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberCucumberexpressionsParameterTypeRegistry, STRING_REGEXPS, id<JavaUtilList>)

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_1 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaMathBigInteger *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_1)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(IoCucumberCucumberexpressionsParameterTypeRegistry_1 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_1 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_1 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_2 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaMathBigDecimal *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_2)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(IoCucumberCucumberexpressionsParameterTypeRegistry_2 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_2 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_2 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_3 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaLangByte *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_3)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(IoCucumberCucumberexpressionsParameterTypeRegistry_3 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_3 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_3 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_4 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaLangShort *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_4)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(IoCucumberCucumberexpressionsParameterTypeRegistry_4 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_4 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_4 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_5 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaLangInteger *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_5)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(IoCucumberCucumberexpressionsParameterTypeRegistry_5 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_5 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_5 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_6 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (JavaLangLong *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_6)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(IoCucumberCucumberexpressionsParameterTypeRegistry_6 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_6 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_6 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_7 : NSObject < IoCucumberCucumberexpressionsTransformer > {
 @public
  IoCucumberCucumberexpressionsNumberParser *val$numberParser_;
}

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsNumberParser:(IoCucumberCucumberexpressionsNumberParser *)capture$0;

- (JavaLangFloat *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_7)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsParameterTypeRegistry_7 *self, IoCucumberCucumberexpressionsNumberParser *capture$0);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_7 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_7 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_8 : NSObject < IoCucumberCucumberexpressionsTransformer > {
 @public
  IoCucumberCucumberexpressionsNumberParser *val$numberParser_;
}

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsNumberParser:(IoCucumberCucumberexpressionsNumberParser *)capture$0;

- (JavaLangDouble *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_8)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsParameterTypeRegistry_8 *self, IoCucumberCucumberexpressionsNumberParser *capture$0);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_8 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_8 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_9 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (NSString *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_9)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(IoCucumberCucumberexpressionsParameterTypeRegistry_9 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_9 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_9 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(void);

@interface IoCucumberCucumberexpressionsParameterTypeRegistry_10 : NSObject < IoCucumberCucumberexpressionsTransformer >

- (instancetype __nonnull)init;

- (NSString *)transformWithNSString:(NSString *)arg;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberCucumberexpressionsParameterTypeRegistry_10)

__attribute__((unused)) static void IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(IoCucumberCucumberexpressionsParameterTypeRegistry_10 *self);

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_10 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberCucumberexpressionsParameterTypeRegistry_10 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(void);

J2OBJC_INITIALIZED_DEFN(IoCucumberCucumberexpressionsParameterTypeRegistry)

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry

- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  IoCucumberCucumberexpressionsParameterTypeRegistry_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (void)defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:(IoCucumberCucumberexpressionsParameterType *)parameterType {
  if ([((id<JavaUtilMap>) nil_chk(parameterTypeByName_)) containsKeyWithId:[((IoCucumberCucumberexpressionsParameterType *) nil_chk(parameterType)) getName]]) @throw create_IoCucumberCucumberexpressionsDuplicateTypeNameException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"There is already a parameter type with name %s", [IOSObjectArray arrayWithObjects:(id[]){ [parameterType getName] } count:1 type:NSObject_class_()]));
  [parameterTypeByName_ putWithId:[parameterType getName] withId:parameterType];
  for (NSString * __strong parameterTypeRegexp in nil_chk([parameterType getRegexps])) {
    if ([((id<JavaUtilMap>) nil_chk(parameterTypesByRegexp_)) getWithId:parameterTypeRegexp] == nil) {
      [parameterTypesByRegexp_ putWithId:parameterTypeRegexp withId:create_JavaUtilTreeSet_init()];
    }
    id<JavaUtilSortedSet> parameterTypes = [parameterTypesByRegexp_ getWithId:parameterTypeRegexp];
    if (![((id<JavaUtilSortedSet>) nil_chk(parameterTypes)) isEmpty] && [((IoCucumberCucumberexpressionsParameterType *) nil_chk([parameterTypes first])) preferForRegexpMatch] && [parameterType preferForRegexpMatch]) {
      @throw create_IoCucumberCucumberexpressionsCucumberExpressionException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"There can only be one preferential parameter type per regexp. The regexp /%s/ is used for two preferential parameter types, {%s} and {%s}", [IOSObjectArray arrayWithObjects:(id[]){ parameterTypeRegexp, [((IoCucumberCucumberexpressionsParameterType *) nil_chk([parameterTypes first])) getName], [parameterType getName] } count:3 type:NSObject_class_()]));
    }
    [parameterTypes addWithId:parameterType];
  }
}

- (IoCucumberCucumberexpressionsParameterType *)lookupByTypeNameWithNSString:(NSString *)typeName {
  return [((id<JavaUtilMap>) nil_chk(parameterTypeByName_)) getWithId:typeName];
}

- (IoCucumberCucumberexpressionsParameterType *)lookupByRegexpWithNSString:(NSString *)parameterTypeRegexp
                                                  withJavaUtilRegexPattern:(JavaUtilRegexPattern *)expressionRegexp
                                                              withNSString:(NSString *)text {
  id<JavaUtilSortedSet> parameterTypes = [((id<JavaUtilMap>) nil_chk(parameterTypesByRegexp_)) getWithId:parameterTypeRegexp];
  if (parameterTypes == nil) return nil;
  if ([parameterTypes size] > 1 && ![((IoCucumberCucumberexpressionsParameterType *) nil_chk([parameterTypes first])) preferForRegexpMatch]) {
    id<JavaUtilList> generatedExpressions = [create_IoCucumberCucumberexpressionsCucumberExpressionGenerator_initWithIoCucumberCucumberexpressionsParameterTypeRegistry_(self) generateExpressionsWithNSString:text];
    @throw create_IoCucumberCucumberexpressionsAmbiguousParameterTypeException_initWithNSString_withJavaUtilRegexPattern_withJavaUtilSortedSet_withJavaUtilList_(parameterTypeRegexp, expressionRegexp, parameterTypes, generatedExpressions);
  }
  return [parameterTypes first];
}

- (id<JavaUtilCollection>)getParameterTypes {
  return [((id<JavaUtilMap>) nil_chk(parameterTypeByName_)) values];
}

- (void)dealloc {
  RELEASE_(parameterTypeByName_);
  RELEASE_(parameterTypesByRegexp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsParameterType;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LIoCucumberCucumberexpressionsParameterType;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilLocale:);
  methods[1].selector = @selector(defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:);
  methods[2].selector = @selector(lookupByTypeNameWithNSString:);
  methods[3].selector = @selector(lookupByRegexpWithNSString:withJavaUtilRegexPattern:withNSString:);
  methods[4].selector = @selector(getParameterTypes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTEGER_REGEXPS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "FLOAT_REGEXPS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 13, 12, -1 },
    { "WORD_REGEXPS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 14, 12, -1 },
    { "STRING_REGEXPS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 15, 12, -1 },
    { "parameterTypeByName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "parameterTypesByRegexp_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "defineParameterType", "LIoCucumberCucumberexpressionsParameterType;", "(Lio/cucumber/cucumberexpressions/ParameterType<*>;)V", "lookupByTypeName", "LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/String;)Lio/cucumber/cucumberexpressions/ParameterType<TT;>;", "lookupByRegexp", "LNSString;LJavaUtilRegexPattern;LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/util/regex/Pattern;Ljava/lang/String;)Lio/cucumber/cucumberexpressions/ParameterType<TT;>;", "()Ljava/util/Collection<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;", &IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, "Ljava/util/List<Ljava/lang/String;>;", &IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS, &IoCucumberCucumberexpressionsParameterTypeRegistry_WORD_REGEXPS, &IoCucumberCucumberexpressionsParameterTypeRegistry_STRING_REGEXPS, "Ljava/util/Map<Ljava/lang/String;Lio/cucumber/cucumberexpressions/ParameterType<*>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/SortedSet<Lio/cucumber/cucumberexpressions/ParameterType<*>;>;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry = { "ParameterTypeRegistry", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, -1, -1, -1, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry;
}

+ (void)initialize {
  if (self == [IoCucumberCucumberexpressionsParameterTypeRegistry class]) {
    JreStrongAssign(&IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"-?\\d+"))) pattern], [((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"\\d+"))) pattern] } count:2 type:NSString_class_()]));
    JreStrongAssign(&IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS, JavaUtilCollections_singletonListWithId_([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"-?\\d*[.,]\\d+"))) pattern]));
    JreStrongAssign(&IoCucumberCucumberexpressionsParameterTypeRegistry_WORD_REGEXPS, JavaUtilCollections_singletonListWithId_([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"\\w+"))) pattern]));
    JreStrongAssign(&IoCucumberCucumberexpressionsParameterTypeRegistry_STRING_REGEXPS, JavaUtilCollections_singletonListWithId_([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"|'([^'\\\\]*(\\\\.[^'\\\\]*)*)'"))) pattern]));
    J2OBJC_SET_INITIALIZED(IoCucumberCucumberexpressionsParameterTypeRegistry)
  }
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_initWithJavaUtilLocale_(IoCucumberCucumberexpressionsParameterTypeRegistry *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->parameterTypeByName_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->parameterTypesByRegexp_, new_JavaUtilHashMap_init());
  JavaTextNumberFormat *numberFormat = JavaTextNumberFormat_getNumberInstanceWithJavaUtilLocale_(locale);
  IoCucumberCucumberexpressionsNumberParser *numberParser = create_IoCucumberCucumberexpressionsNumberParser_initWithJavaTextNumberFormat_(numberFormat);
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"biginteger", IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaMathBigInteger_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"bigdecimal", IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS, JavaMathBigDecimal_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"byte", IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaLangByte_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"short", IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaLangShort_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"int", IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaLangInteger_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(), true, true)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"long", IoCucumberCucumberexpressionsParameterTypeRegistry_INTEGER_REGEXPS, JavaLangLong_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"float", IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS, JavaLangFloat_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(numberParser), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"double", IoCucumberCucumberexpressionsParameterTypeRegistry_FLOAT_REGEXPS, JavaLangDouble_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(numberParser), true, true)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"word", IoCucumberCucumberexpressionsParameterTypeRegistry_WORD_REGEXPS, NSString_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(), false, false)];
  [self defineParameterTypeWithIoCucumberCucumberexpressionsParameterType:create_IoCucumberCucumberexpressionsParameterType_initWithNSString_withJavaUtilList_withIOSClass_withIoCucumberCucumberexpressionsTransformer_withBoolean_withBoolean_(@"string", IoCucumberCucumberexpressionsParameterTypeRegistry_STRING_REGEXPS, NSString_class_(), create_IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(), true, false)];
}

IoCucumberCucumberexpressionsParameterTypeRegistry *new_IoCucumberCucumberexpressionsParameterTypeRegistry_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry, initWithJavaUtilLocale_, locale)
}

IoCucumberCucumberexpressionsParameterTypeRegistry *create_IoCucumberCucumberexpressionsParameterTypeRegistry_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry, initWithJavaUtilLocale_, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberCucumberexpressionsParameterTypeRegistry)

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaMathBigInteger *)transformWithNSString:(NSString *)arg {
  return create_JavaMathBigInteger_initWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/math/BigInteger;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_1 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_1;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_1_init(IoCucumberCucumberexpressionsParameterTypeRegistry_1 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_1 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_1_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_1, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_1 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_1_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_1, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaMathBigDecimal *)transformWithNSString:(NSString *)arg {
  return create_JavaMathBigDecimal_initWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/math/BigDecimal;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_2 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_2;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_2_init(IoCucumberCucumberexpressionsParameterTypeRegistry_2 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_2 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_2_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_2, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_2 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_2_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_2, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangByte *)transformWithNSString:(NSString *)arg {
  return JavaLangByte_decodeWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Byte;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_3 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_3;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_3_init(IoCucumberCucumberexpressionsParameterTypeRegistry_3 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_3 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_3_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_3, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_3 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_3_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_3, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_4

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangShort *)transformWithNSString:(NSString *)arg {
  return JavaLangShort_decodeWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Short;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_4 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_4;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_4_init(IoCucumberCucumberexpressionsParameterTypeRegistry_4 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_4 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_4_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_4, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_4 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_4_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_4, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangInteger *)transformWithNSString:(NSString *)arg {
  return JavaLangInteger_decodeWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_5 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_5;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_5_init(IoCucumberCucumberexpressionsParameterTypeRegistry_5 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_5 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_5_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_5, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_5 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_5_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_5, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_6

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangLong *)transformWithNSString:(NSString *)arg {
  return JavaLangLong_decodeWithNSString_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_6 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_6;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_6_init(IoCucumberCucumberexpressionsParameterTypeRegistry_6 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_6 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_6_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_6, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_6 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_6_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_6, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_7

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsNumberParser:(IoCucumberCucumberexpressionsNumberParser *)capture$0 {
  IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(self, capture$0);
  return self;
}

- (JavaLangFloat *)transformWithNSString:(NSString *)arg {
  return JavaLangFloat_valueOfWithFloat_([((IoCucumberCucumberexpressionsNumberParser *) nil_chk(val$numberParser_)) parseFloatWithNSString:arg]);
}

- (void)dealloc {
  RELEASE_(val$numberParser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsNumberParser:);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$numberParser_", "LIoCucumberCucumberexpressionsNumberParser;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_7 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_7;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsParameterTypeRegistry_7 *self, IoCucumberCucumberexpressionsNumberParser *capture$0) {
  JreStrongAssign(&self->val$numberParser_, capture$0);
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_7 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_7, initWithIoCucumberCucumberexpressionsNumberParser_, capture$0)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_7 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_7_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_7, initWithIoCucumberCucumberexpressionsNumberParser_, capture$0)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_8

- (instancetype __nonnull)initWithIoCucumberCucumberexpressionsNumberParser:(IoCucumberCucumberexpressionsNumberParser *)capture$0 {
  IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(self, capture$0);
  return self;
}

- (JavaLangDouble *)transformWithNSString:(NSString *)arg {
  return JavaLangDouble_valueOfWithDouble_([((IoCucumberCucumberexpressionsNumberParser *) nil_chk(val$numberParser_)) parseDoubleWithNSString:arg]);
}

- (void)dealloc {
  RELEASE_(val$numberParser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberCucumberexpressionsNumberParser:);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$numberParser_", "LIoCucumberCucumberexpressionsNumberParser;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_8 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_8;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsParameterTypeRegistry_8 *self, IoCucumberCucumberexpressionsNumberParser *capture$0) {
  JreStrongAssign(&self->val$numberParser_, capture$0);
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_8 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_8, initWithIoCucumberCucumberexpressionsNumberParser_, capture$0)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_8 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_8_initWithIoCucumberCucumberexpressionsNumberParser_(IoCucumberCucumberexpressionsNumberParser *capture$0) {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_8, initWithIoCucumberCucumberexpressionsNumberParser_, capture$0)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_9

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)transformWithNSString:(NSString *)arg {
  return arg;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_9 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_9;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_9_init(IoCucumberCucumberexpressionsParameterTypeRegistry_9 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_9 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_9_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_9, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_9 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_9_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_9, init)
}

@implementation IoCucumberCucumberexpressionsParameterTypeRegistry_10

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)transformWithNSString:(NSString *)arg {
  return [((NSString *) nil_chk([((NSString *) nil_chk(arg)) java_replaceAll:@"\\\\\"" withReplacement:@"\""])) java_replaceAll:@"\\\\'" withReplacement:@"'"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LNSString;", "LIoCucumberCucumberexpressionsParameterTypeRegistry;", "initWithJavaUtilLocale:", "Ljava/lang/Object;Lio/cucumber/cucumberexpressions/Transformer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IoCucumberCucumberexpressionsParameterTypeRegistry_10 = { "", "io.cucumber.cucumberexpressions", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_IoCucumberCucumberexpressionsParameterTypeRegistry_10;
}

@end

void IoCucumberCucumberexpressionsParameterTypeRegistry_10_init(IoCucumberCucumberexpressionsParameterTypeRegistry_10 *self) {
  NSObject_init(self);
}

IoCucumberCucumberexpressionsParameterTypeRegistry_10 *new_IoCucumberCucumberexpressionsParameterTypeRegistry_10_init() {
  J2OBJC_NEW_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_10, init)
}

IoCucumberCucumberexpressionsParameterTypeRegistry_10 *create_IoCucumberCucumberexpressionsParameterTypeRegistry_10_init() {
  J2OBJC_CREATE_IMPL(IoCucumberCucumberexpressionsParameterTypeRegistry_10, init)
}
